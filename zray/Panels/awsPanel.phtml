<?php
class Aws {
    static public function getData() {
		if (! self::Visit('http://169.254.169.254/latest/user-data')) {
			return null;
		}
		
        $userData = @file_get_contents("http://169.254.169.254/latest/user-data");
        if($userData === false) {
            $userData = '<none>';
        }
        $result = [
            'meta-data' => self::getAwsData("http://169.254.169.254/latest/meta-data"),
            'dynamic' => self::getAwsData("http://169.254.169.254/latest/dynamic"),
            'user-data' => $userData,
        ];
        return $result;
    }

    static private function getAwsData($url)
    {
        $data = file_get_contents($url);

        $result = [];
        foreach(explode("\n",$data) as $name) {
            $name = strstr($name,'=',true) == '' ? $name : strstr($name,'=',true) . '/';
            if(strstr($name,'/')) {
                $result[$name] = self::getAwsData("{$url}/{$name}");
            } else if($name !== "") {
                $result[$name] = file_get_contents("{$url}/{$name}") ;
            }
        }
        return $result;
    }
	
	static function Visit($url){
       $agent = "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)";$ch=curl_init();
       curl_setopt ($ch, CURLOPT_URL,$url );
       curl_setopt($ch, CURLOPT_USERAGENT, $agent);
       curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
       curl_setopt ($ch,CURLOPT_VERBOSE,false);
       curl_setopt($ch, CURLOPT_TIMEOUT, 3);
       curl_setopt($ch,CURLOPT_SSL_VERIFYPEER, FALSE);
       curl_setopt($ch,CURLOPT_SSLVERSION,3);
       curl_setopt($ch,CURLOPT_SSL_VERIFYHOST, FALSE);
       $page=curl_exec($ch);
       //echo curl_error($ch);
       $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
       curl_close($ch);
       if($httpcode>=200 && $httpcode<300) return true;
       else return false;
	}
}

$data = Aws::getData();
?>

<?php if (is_null($data)) : ?>
	<div style="padding: 10px;"><b>This plugin can be used only on AWS environment.</b></div>
<?php else : ?>
<?php 
$tableParams = [
    'tableId' => 'awsPanel',
    'tableWidth' => '4',
];
echo $this->zrayTable($tableParams); 
?>

<script type="text/javascript">
(function() {
    var storage = zray.getStorage("invalidStorage");
    var data = <?=json_encode($data)?>;
    delete data.dynamic;
    storage.setData(data);
    var tree = zray.createTreeTable(storage, jQuery('#<?php echo $tableParams['tableId']; ?>'));
})();
</script>
<?php endif; ?>
